openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker News
  description:
    "This is the Open API documentation for the REST API of our beloved
    application **Hackernews** deployed at
    <https://aswprojectdjango.herokuapp.com//>. <br>All operations are
    executable. Only one operation requires authentication: `deleteTweet`. In
    this case, you must **Authorize** your request by providing the api_key
    vaule you got when you created the tweet."
servers:
  - url: "https://aswprojectdjango.herokuapp.com/api"
  - url: "http://127.0.0.1:8000/api"
paths:
  /{username}:
    get:
      tags:
        - user
      summary: Retrieves a User by its username
      description: Returns a user
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          description: username of User to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: "Error: Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error404"
    delete:
      tags:
        - tweets
      summary: Deletes a Tweet
      operationId: deleteTweet
      parameters:
        - name: tweetId
          in: path
          description: Tweet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Tweet deleted
          content:
            application/json: {}
        404:
          description: "Error: Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error404"
        401:
          description: "Error: Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error401"
        403:
          description: "Error: Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error403"
      security:
        - ApiKeyAuth: []
  /tweets:
    post:
      tags:
        - tweets
      summary: Adds a new Tweet to the Wall of Tweets
      operationId: addTweet
      requestBody:
        description: Provide the author & content of the new Tweet
        content:
          application/json:
            schema:
              required:
                - author
                - content
              type: object
              properties:
                author:
                  type: string
                  minLength: 4
                  example: "My name"
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: "My content"
        required: true
      responses:
        201:
          description: Tweet created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddTweetResult"
        400:
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error400"
    get:
      tags:
        - tweets
      summary: Retrieves all the Tweets
      operationId: getAllTweets
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tweet"

  /tweets/{tweetId}/likes:
    post:
      tags:
        - tweets
      summary: Likes a Tweet
      operationId: likeTweet
      parameters:
        - name: tweetId
          in: path
          description: Tweet id to like
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Liked Tweet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tweet"
        404:
          description: "Error: Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error404"
  /{username}/submissions:
    get:
      tags:
        - submissions
      summary: Retrieves all submissions by user
      operationId: submissionsByUser
      parameters:
        - name: username
          in: path
          description: username to get submissions
          required: true
          schema:
            type: string
            minLength: 1
            example: "pau"
      responses:
        200:
          description: submissions Retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionsByUser"
        404:
          description: "Error: Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error404"
components:
  schemas:
    User:
      type: object
      properties:
        authUser:
          type: object
          properties:
            username:
              type: string
              example: "user43"
            email:
              type: string
              example: "user43@email.com"
            firstName:
              type: string
              example: "userFirstName"
            lastName:
              type: string
              example: "userLastName"
            staffStatus:
              type: boolean
              example: false
        karma:
          type: integer
          format: int64
          example: 2
        about:
          type: string
          example: "Hello, I'm ..."
        showDead:
          type: boolean
          example: false
        noprocrast:
          type: boolean
          example: true
        maxvisit:
          type: string
          maxLength: 16
          example: 100
        minaway:
          type: string
          maxLength: 16
          example: 14
        delay:
          type: string
          maxLength: 16
          example: 24
        created_at_date:
          type: string
          example: "14/02/2094"
        create_at_time:
          type: string
          example: "08:55 CEST"
    Tweet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        author:
          type: string
          minLength: 4
          example: "My name"
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: "My content"
        likes:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: "https://asw-api-demo.herokuapp.com/tweets/2"
    AddTweetResult:
      type: object
      properties:
        new_tweet:
          $ref: "#/components/schemas/Tweet"
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    SubmissionsByUser:
      type: object
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error:
          type: string
          enum:
            [
              "Bad Request",
              "Unauthorized",
              "Forbidden",
              "Not Found",
              "Conflict",
            ]
        message:
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No User with that username"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header
